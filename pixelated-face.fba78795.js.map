{"version":3,"sources":["pixelated-face.js"],"names":["video","document","querySelector","canvas","ctx","getContext","faceCanvas","faceCtx","faceDetector","window","FaceDetector","optionsInputs","querySelectorAll","console","log","options","SIZE","SCALE","handleOption","e","value","name","currentTarget","parseFloat","populateVideo","stream","navigator","mediaDevices","getUserMedia","width","height","srcObject","play","videoWidth","videoHeight","detect","faces","requestAnimationFrame","forEach","drawFace","censor","face","top","left","boundingBox","clearRect","strokeStyle","lineWidth","strokeRect","imageSmoothingEnabled","drawImage","x","y","input","addEventListener","then"],"mappings":";AAIA,MAAMA,EAAQC,SAASC,cAAc,WAE/BC,EAASF,SAASC,cAAc,UAChCE,EAAMD,EAAOE,WAAW,MAExBC,EAAaL,SAASC,cAAc,SACpCK,EAAUD,EAAWD,WAAW,MAEhCG,EAAe,IAAIC,OAAOC,aAE1BC,EAAgBV,SAASW,iBAC7B,iCAEFC,QAAQC,IAAIH,GACZ,MAAMI,EAAU,CACdC,KAAM,GACNC,MAAO,MAKT,SAASC,EAAaC,GACd,MAAA,MAAEC,EAAF,KAASC,GAASF,EAAEG,cAC1BP,EAAQM,GAAQE,WAAWH,GAG7B,eAAeI,IACPC,MAAAA,QAAeC,UAAUC,aAAaC,aAAa,CACvD5B,MAAO,CAAE6B,MAAO,KAAMC,OAAQ,OAEhCjB,QAAQC,IAAIW,GACZzB,EAAM+B,UAAYN,QACZzB,EAAMgC,OACZ7B,EAAO0B,MAAQ7B,EAAMiC,WACrB9B,EAAO2B,OAAS9B,EAAMkC,YACtB5B,EAAWuB,MAAQ7B,EAAMiC,WACzB3B,EAAWwB,OAAS9B,EAAMkC,YAG5B,eAAeC,IACPC,MAAAA,QAAc5B,EAAa2B,OAAOnC,GACxCa,QAAQC,IAAIsB,GACZC,sBAAsBF,GACtBC,EAAME,QAAQC,GACdH,EAAME,QAAQE,GAGhB,SAASD,EAASE,GAChB5B,QAAQC,IAAI2B,GACN,MAAA,MAAEZ,EAAF,OAASC,EAAT,IAAiBY,EAAjB,KAAsBC,GAASF,EAAKG,YAC1CxC,EAAIyC,UAAU,EAAG,EAAG1C,EAAO0B,MAAO1B,EAAO2B,QACzC1B,EAAI0C,YAAc,UAClB1C,EAAI2C,UAAY,EAChB3C,EAAI4C,WAAWL,EAAMD,EAAKb,EAAOC,GAGnC,SAASU,GAASI,YAAaH,IAE7BlC,EAAQ0C,uBAAwB,EAChC1C,EAAQsC,UAAU,EAAG,EAAGvC,EAAWuB,MAAOvB,EAAWwB,QACrDvB,EAAQ2C,UACNlD,EACAyC,EAAKU,EACLV,EAAKW,EACLX,EAAKZ,MACLY,EAAKX,OAELW,EAAKU,EACLV,EAAKW,EACLrC,EAAQC,KACRD,EAAQC,MAGJa,MAAAA,EAAQY,EAAKZ,MAAQd,EAAQE,MAC7Ba,EAASW,EAAKZ,MAAQd,EAAQE,MACpCV,EAAQ2C,UACN5C,EACAmC,EAAKU,EACLV,EAAKW,EACLrC,EAAQC,KACRD,EAAQC,KACRyB,EAAKU,GAAKtB,EAAQY,EAAKZ,OAAS,EAChCY,EAAKW,GAAKtB,EAASW,EAAKX,QAAU,EAClCD,EACAC,GAhEJnB,EAAc2B,QAAQe,GAASA,EAAMC,iBAAiB,QAASpC,IAqE/DM,IAAgB+B,KAAKpB","file":"pixelated-face.fba78795.js","sourceRoot":"..","sourcesContent":["// The face detection does not work on all browsers and operating systems.\n// If you are getting a `Face detection service unavailable` error or similar,\n// it's possible that it won't work for you at the moment.\n\nconst video = document.querySelector('.webcam');\n\nconst canvas = document.querySelector('.video');\nconst ctx = canvas.getContext('2d');\n\nconst faceCanvas = document.querySelector('.face');\nconst faceCtx = faceCanvas.getContext('2d');\n\nconst faceDetector = new window.FaceDetector();\n\nconst optionsInputs = document.querySelectorAll(\n  '.controls input[type=\"range\"]'\n);\nconsole.log(optionsInputs);\nconst options = {\n  SIZE: 10,\n  SCALE: 1.35,\n};\n\n// input\noptionsInputs.forEach(input => input.addEventListener('input', handleOption));\nfunction handleOption(e) {\n  const { value, name } = e.currentTarget;\n  options[name] = parseFloat(value);\n}\n\nasync function populateVideo() {\n  const stream = await navigator.mediaDevices.getUserMedia({\n    video: { width: 1280, height: 720 },\n  });\n  console.log(stream);\n  video.srcObject = stream;\n  await video.play();\n  canvas.width = video.videoWidth;\n  canvas.height = video.videoHeight;\n  faceCanvas.width = video.videoWidth;\n  faceCanvas.height = video.videoHeight;\n}\n\nasync function detect() {\n  const faces = await faceDetector.detect(video);\n  console.log(faces);\n  requestAnimationFrame(detect);\n  faces.forEach(drawFace);\n  faces.forEach(censor);\n}\n\nfunction drawFace(face) {\n  console.log(face);\n  const { width, height, top, left } = face.boundingBox;\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.strokeStyle = '#ffc600';\n  ctx.lineWidth = 2;\n  ctx.strokeRect(left, top, width, height);\n}\n\nfunction censor({ boundingBox: face }) {\n  // draw the small face\n  faceCtx.imageSmoothingEnabled = false;\n  faceCtx.clearRect(0, 0, faceCanvas.width, faceCanvas.height);\n  faceCtx.drawImage(\n    video, // where does the source come from?\n    face.x, // where do we start the source pull from?\n    face.y,\n    face.width,\n    face.height,\n    // 4 draw args\n    face.x, //  start drawing the x and y?\n    face.y,\n    options.SIZE,\n    options.SIZE\n  );\n\n  const width = face.width * options.SCALE;\n  const height = face.width * options.SCALE;\n  faceCtx.drawImage(\n    faceCanvas, // source\n    face.x, // start\n    face.y,\n    options.SIZE,\n    options.SIZE,\n    face.x - (width - face.width) / 2, // args\n    face.y - (height - face.height) / 2,\n    width,\n    height\n  );\n  // draw the small face back on, but scale up\n}\n\npopulateVideo().then(detect);\n"]}